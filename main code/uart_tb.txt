`timescale 1ns/1ps

module uart_tb;

  // Parameters
  parameter c_CLOCK_PERIOD_NS = 10;          // 10 MHz clock (100 ns period)
  parameter c_CLKS_PER_BIT    = 8;           // Baud ~115200
  parameter c_BIT_PERIOD      = c_CLOCK_PERIOD_NS * c_CLKS_PER_BIT;

  // DUT inputs
  reg        r_Clock = 0;
  reg        i_Tx_DV = 0;
  reg [7:0]  r_Tx_Byte = 0;
  wire       w_Tx_Active;
  wire       w_Tx_Done;
  wire       w_Tx_Serial;
  wire       w_Rx_DV;
  wire [7:0] w_Rx_Byte;
  

  // Debug signals from TX
  wire [1:0] tx_state;
  wire [2:0] tx_bit_idx;
  wire [7:0] tx_clk_count;

  // Debug signals from RX
  wire [1:0] rx_state;

  // Instantiate TX
  uart_tx #(.CLKS_PER_BIT(c_CLKS_PER_BIT)) uart_tx_inst (
    .i_Clock(r_Clock),
    .i_Tx_DV(i_Tx_DV),
    .i_Tx_Byte(r_Tx_Byte),
    .o_Tx_Active(w_Tx_Active),
    .o_Tx_Serial(w_Tx_Serial),
    .o_Tx_Done(w_Tx_Done),
    .state(tx_state),
    .bit_index(tx_bit_idx),
    .count_value(tx_clk_count)
  );

  // Instantiate RX
  uart_rx #(.CLKS_PER_BIT(c_CLKS_PER_BIT)) uart_rx_inst (
    .i_Clock(r_Clock),
    .i_Rx_Serial(w_Tx_Serial), // loopback
    .o_Rx_DV(w_Rx_DV),
    .o_Rx_Byte(w_Rx_Byte),
    .state(rx_state)
  );

  // Generate clock
  always #(c_CLOCK_PERIOD_NS/2) r_Clock <= ~r_Clock;

  // Task: Send a byte
  task UART_WRITE_BYTE(input [7:0] data);
  begin
    @(posedge r_Clock);
    r_Tx_Byte <= data;
    i_Tx_DV   <= 1;
    @(posedge r_Clock);
    i_Tx_DV   <= 0;
  end
  endtask

  // Debug monitor
  always @(posedge r_Clock) begin
    $display("T=%0t | TX_State=%b BitIdx=%0d Count=%0d | Serial=%b | Done=%b | RX_State=%b RX_DV=%b RX_Byte=0x%0h",
             $time, tx_state, tx_bit_idx, tx_clk_count, w_Tx_Serial, w_Tx_Done,
             rx_state, w_Rx_DV, w_Rx_Byte);
  end

  // Main stimulus
  initial begin
    $dumpfile("uart_tb.vcd");
    $dumpvars(0, uart_tb);

    // Wait a little
    #(10*c_CLOCK_PERIOD_NS);

    // Send first byte
    UART_WRITE_BYTE(8'h55);  // "U" = 01010101
    #(c_BIT_PERIOD*12);      // wait full frame

    // Send second byte
    UART_WRITE_BYTE(8'hA3);  // 1010_0011
    #(c_BIT_PERIOD*12);

    // Send third byte
    UART_WRITE_BYTE(8'h5A);  // 0101_1010
    #(c_BIT_PERIOD*12);

    // Finish
    #(20*c_CLOCK_PERIOD_NS);
    $finish;
  end

endmodule
