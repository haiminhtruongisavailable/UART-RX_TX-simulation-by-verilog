module uart_top #(
  parameter CLKS_PER_BIT = 87
)(
  input        i_Clock,
  input        i_Tx_DV,
  input  [7:0] i_Tx_Byte,
  output       o_Tx_Active,
  output       o_Tx_Done,
  output       o_Tx_Serial,
  input        i_Rx_Serial,
  output       o_Rx_Done,
  output [7:0] o_Rx_Byte,
  output [1:0] tx_state,
  output [1:0] rx_state
);

  // UART Transmitter (must have .state and .count outputs in uart_tx)
  uart_tx #(.CLKS_PER_BIT(CLKS_PER_BIT)) tx_inst (
    .i_Clock(i_Clock),
    .i_Tx_DV(i_Tx_DV),
    .i_Tx_Byte(i_Tx_Byte),
    .o_Tx_Active(o_Tx_Active),
    .o_Tx_Serial(o_Tx_Serial),
    .o_Tx_Done(o_Tx_Done),
    .state(tx_state)
  );

  // UART Receiver (must have .state and .count outputs in uart_rx)
  uart_rx #(.CLKS_PER_BIT(CLKS_PER_BIT)) rx_inst (
    .i_Clock(i_Clock),
    .i_Rx_Serial(i_Rx_Serial),
    .o_Rx_DV(o_Rx_Done),
    .o_Rx_Byte(o_Rx_Byte),
    .state(rx_state)
  );

endmodule

